---
// ThemeToggle.astro - Componente para cambiar entre tema claro y oscuro
---

<button
  id="theme-toggle"
  class="theme-toggle"
  aria-label="Cambiar tema"
  title="Cambiar tema"
>
  <span class="theme-icon sun-emoji" aria-hidden="true">‚òÄÔ∏è</span>
  <span class="theme-icon moon-emoji" aria-hidden="true">üåô</span>
</button>

<style lang="scss">
  .theme-toggle {
    position: relative;
    background: var(--bg-secondary);
    border: 1px solid var(--border-light);
    border-radius: 50%;
    width: 44px;
    height: 44px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
    overflow: hidden;

    &:hover {
      border-color: var(--secondary);
      background: var(--border-light);
      transform: scale(1.05);
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

    &:focus {
      outline: none;
      border-color: var(--secondary);
      box-shadow: 0 0 0 3px rgba(26, 109, 204, 0.2);
    }

    .theme-icon {
      position: absolute;
      font-size: 1.2rem;
      transition: all 0.3s ease;
      user-select: none;
    }

    .moon-emoji {
      opacity: 1;
      transform: scale(1) rotate(0deg);
    }

    .sun-emoji {
      opacity: 0;
      transform: scale(0.5) rotate(180deg);
    }

    // Tema claro - mostrar luna para cambiar a oscuro
    [data-theme="light"] & {
      .moon-emoji {
        opacity: 1;
        transform: scale(1) rotate(0deg);
      }

      .sun-emoji {
        opacity: 0;
        transform: scale(0.5) rotate(-180deg);
      }
    }

    // Tema oscuro - mostrar sol para cambiar a claro
    :root:not([data-theme="light"]) &,
    [data-theme="dark"] & {
      .sun-emoji {
        opacity: 1;
        transform: scale(1) rotate(0deg);
      }

      .moon-emoji {
        opacity: 0;
        transform: scale(0.5) rotate(180deg);
      }
    }
  }

  // Tema claro - mejores estilos del bot√≥n
  [data-theme="light"] .theme-toggle {
    background: var(--bg-primary);
    border-color: var(--border-color);

    &:hover {
      background: var(--bg-secondary);
      border-color: var(--secondary);
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
    }
  }

  // Responsive - en m√≥vil hacer m√°s peque√±o
  @media (max-width: 768px) {
    .theme-toggle {
      width: 40px;
      height: 40px;

      .theme-icon {
        font-size: 1rem;
      }
    }
  }

  // Animaci√≥n de rotaci√≥n suave
  @keyframes rotate-in {
    from {
      transform: scale(0.5) rotate(-180deg);
      opacity: 0;
    }
    to {
      transform: scale(1) rotate(0deg);
      opacity: 1;
    }
  }

  @keyframes rotate-out {
    from {
      transform: scale(1) rotate(0deg);
      opacity: 1;
    }
    to {
      transform: scale(0.5) rotate(180deg);
      opacity: 0;
    }
  }
</style>

<script>
  function initThemeToggle() {
    const themeToggle = document.getElementById("theme-toggle");

    if (!themeToggle) return;

    // Manejar el click del toggle usando el themeManager global
    themeToggle.addEventListener("click", () => {
      if ((window as any).themeManager) {
        (window as any).themeManager.toggleTheme();
      } else {
        // Fallback si themeManager no est√° disponible
        const htmlElement = document.documentElement;
        const currentTheme = htmlElement.getAttribute("data-theme");

        if (currentTheme === "light") {
          htmlElement.removeAttribute("data-theme");
          localStorage.setItem("theme", "dark");
        } else {
          htmlElement.setAttribute("data-theme", "light");
          localStorage.setItem("theme", "light");
        }

        window.dispatchEvent(
          new CustomEvent("themeChanged", {
            detail: { theme: htmlElement.getAttribute("data-theme") || "dark" },
          }),
        );
      }
    });

    // Actualizar el estado visual del toggle
    function updateToggleState() {
      const currentTheme = (window as any).themeManager
        ? (window as any).themeManager.getCurrentTheme()
        : document.documentElement.getAttribute("data-theme") || "dark";

      // Actualizar el aria-label seg√∫n el tema actual
      const newTheme = currentTheme === "light" ? "oscuro" : "claro";
      themeToggle.setAttribute("aria-label", `Cambiar a tema ${newTheme}`);
      themeToggle.setAttribute("title", `Cambiar a tema ${newTheme}`);
    }

    // Escuchar cambios de tema para actualizar el estado
    window.addEventListener("themeChanged", updateToggleState);

    // Actualizar estado inicial
    updateToggleState();
  }

  // Ejecutar cuando el DOM est√© listo
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initThemeToggle);
  } else {
    initThemeToggle();
  }

  // Re-inicializar en navegaci√≥n de Astro
  document.addEventListener("astro:page-load", initThemeToggle);
</script>
